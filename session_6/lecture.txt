







Plan



Flexbox
Sass
Bootstrap

















Intro to Flexbox






Before talking about flexbox
lets illustrate how I will struggle
to style a page without flexbox.





Problems







A row of cards
examples/row.png


Initially I will have only HTMl.
Next I will show step by step styling.



demo/card_inline.html





Positioning problems:

- position: relative need to add
pixel perfect offset.
- not responsive.
- text below still maintains the gap.


- position: absolute need to add
pixel perfect offset.
- not responsive.
- margins are not respected.

If I add three sections and change div
to position: relative, the design will
be broken.


Problem with gap.


-- position: relative of the parent <div>






Problem with equal height






A row of cards equal height
examples/equal_height.png



There is no way to set them equal height. Only with JS
and combination of display: table, which I honestly don't know
how to do.



















Flexbox









demo/card_inline.html







demo/card_inline_equal_height.html








Flexbox (Flexible Box Layout) is a CSS layout model
designed to create flexible and responsive web designs.
It allows you to distribute space and align items within
a container, even when their sizes are unknown or dynamic.








Main Terms:

- Flex Container
(parent element)

- Flex Items
(children)

- Main Axis
(column or row)








Common properties for the Container:

flex-direction
Sets the direction of items (row, column).

justify-content
Aligns items along the main axis.

align-items
Stretch, center, etc with items.

flex-wrap
Allows items to wrap to new lines if needed.


Common properties for the Items:

flex-grow
Allows an item to grow if there's extra space.

flex-shrink
Allows an item to shrink if needed.

flex-basis
Sets the initial size of an item.






Example

.container {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.item {
  flex: 1; /* Grow and shrink equally */
}







Great resource about Flexbox:
https://css-tricks.com/snippets/css/a-guide-to-flexbox/














SASS












SASS (Syntactically Awesome Style Sheets)
is a CSS preprocessor â€” a scripting language
that extends CSS. It makes writing CSS more
efficient and maintainable. SASS code is
compiled into standard CSS.




SASS features:

- variables
- mixins
- imports
- calculations
- nesting
- & (ampersand)
etc.







SASS file looks like *.scss









Variables









We can use variables in SASS to
store reusable values
(colors, fonts, sizes).




Example

$primary-color: #3498db;
$font-stack: Arial, sans-serif;

...

body {
  color: $primary-color;
  font-family: $font-stack;
}









Mixins










Reuse blocks of styles with parameters.

Syntax

Define a mixin with: @mixin name
Apply mixin with: @include name









Example

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

...

.container {
  @include flex-center;
}







CCL2

https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic/blob/947ff3db90a855fbbd09913364284c0a99791c44/projects/cbfq-appstatic/src/app/components/loading/loading.component.scss#L1









Imports










Split code into smaller files
(_partial.scss) and import them.






Step 1:

Create your variables in
separate file:

$teal-500: #008089;


Step 2:

Save your file _some-name.scss
and place it into global folder.
For example, in CCL2 project:

cbfq-appstatic/src/styles/_theme-colors.scss


Step 3:

Import this file without full path,
without _ and without .scss:

@import "theme-colors";


Step 4:

You can now use $teal-500 variable
in your SASS code:

@import "theme-colors";
.light {
    color: $teal-500;
}



CCL2:

https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic/blob/947ff3db90a855fbbd09913364284c0a99791c44/projects/cbfq-appstatic/src/app/modules/bind/components/thank-you/thank-you.component.scss#L1

Theme-colors:

https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic/blob/947ff3db90a855fbbd09913364284c0a99791c44/projects/cbfq-appstatic/src/styles/_theme-colors.scss#L1









Operations









Perform calculations directly in styles.



.container {
  width: 100% / 3;
  padding: 10px + 5px;
}







Nesting










Write cleaner, hierarchical styles.



HTML

<nav class="navbar">
    <ul class="nav-list">
      <li class="nav-item">
        <a href="#">Home <span>page</span></a>
      </li>
    </ul>
</nav>


CSS

.navbar {
  background: #333;
}
.navbar .nav-list {
  background: #222;
}
.navbar .nav-list .nav-item {
  background: #111;
}
.navbar .nav-list .nav-item a {
  background: #000;
}
.navbar .nav-list .nav-item a span {
  background: #fff;
}


SASS

.navbar {
    background: #333;
    .nav-list {
        background: #222;
        .nav-item {
            background: #111;
            a {
                background: #000;
                span {
                    background: #fff;
                }
            }
        }
    }
}









&








The & (ampersand) in SASS is a
reference to the parent selector





Example

HTML

<button> Close </button>


CSS

button {
    background-color: #111;
}

button:hover {
    background-color: #222;
}

button:active {
    background-color: #333;
}


SASS

button {
    background-color: #111;

    &:hover {
        background-color: #222;
    }

    &:active {
        background-color: #333;
    }
}







Example

HTML

<button class="small">
    Close Menu
</button>


CSS

button {
    font-size: 16px;
}

button.small {
    font-size: 14px;
}


SASS

button {
    font-size: 16px;
    &.small {
       font-size: 14px;
    }
}








CCL2

https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic/blob/947ff3db90a855fbbd09913364284c0a99791c44/projects/cbfq-appstatic/src/app/modules/advisor/components/uwa-underwriting-rules/uwa-underwriting-rules.component.scss#L11











Bootstrap











Bootstrap is a popular front-end framework.

It has utility classes predefined and a grid system.

Essentially they allow to divide any container into
12 columns. Next, I can use classes to specify the
width of these "columns":

I need to use this class structure in my HTML
if I want to use grid system from Bootstrap:


.row {
    .col-[number] { }
}



Example

HTML

<div class="row">
    <div class="col-6">Left Column (50%)</div>
    <div class="col-6">Right Column (50%)</div>
</div>

This will divide the full width of my
container into two equal parts:

6 columns out of 12 possible for "Left Column"
6 columns out of 12 possible for "Right Column"

6 + 6 = 12.
As these two columns will take all 12 possible columns
there will be no space left on the page.




Example

<div class="row">
    <div class="col-2">Left Column (1/6th)</div>
    <div class="col-6">Right Column (50%)</div>
</div>

In this example I will have one narrow Left column:

2 columns out of 12 possible for "Left Column"
6 columns out of 12 possible for "Right Column"

2 + 6 = 8.

These two columns do not take the full 12 column
width, as they only take 8 columns. The rest (4 columns)
will be empty space on my page to the right.








Bootstrap allows to control responsiveness:

Breakpoints






default or none

example: .col-6
This class will be applied only on max-width: 576px

sm

example: .col-sm-6
This class will be applied only on
min-width: 576px and max-width: 768px


md

example: .col-md-6
This class will be applied only on
min-width: 768px and max-width: 992px


lg

example: .col-lg-6
This class will be applied only on
min-width: 992px and max-width: 1200px


xl

example: .col-xl-6
This class will be applied only on
min-width: 1200px and max-width: 1400px


xxl

example: .col-xxl-6
This class will be applied only on
min-width: 1400px










Online example:

https://getbootstrap.com/docs/5.3/examples/grid/





To demo bootstrap I can import library like:
<!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">











Thank you






