





Plan

Into to Angular
SPA
Component-based architecture
Landing page and CCL2 app
Code owners and maintainers
Running on local













What is Angular?

- A front-end framework developed by Google.
- Allows to create single-page application (SPA).
- Component-based architecture.







What is a single-page application?






Traditional website flow

1) Initial page load

- Browser → Requests index.html from the server.
- Server → Responds with full HTML + linked CSS/JS/images.
- Browser → Renders the page.

2) User clicks a link (e.g., /about)

- Browser → Requests about.html from the server.
- Server → Sends a brand new HTML page (with its own CSS/JS).
- Browser → Unloads the current page, reloads everything from scratch.

Result: Visible "flash" or blank screen during reload.




Single-page application flow

1) Initial page load

- Browser → Requests index.html.
- Server → Responds with minimal HTML + Angular app bundle (JS/CSS).
- Browser → Renders the app.

2) User clicks a link (e.g., /about)

- Angular (JS) → Intercepts the click.
- No server request!
- Angular (JS) → Updates the URL to /about.
- Angular (JS) → Loads the "About" component and swaps it in the DOM.
- No full page reload!

Result: Instant transition, no flash/blank screen.




To sum up:

In Angular:

- All UI interactions (clicks, form submissions, navigation)
are handled client-side by JavaScript.
- No full page reloads occur.
- Angular dynamically updates the DOM.
- Angular makes fetch()/HTTP calls to APIs and gets JSON as response
if data from backend is needed.
- The server acts as a data endpoint (REST API).







Pros and cons



Pros

- Build-in solutions, libraries, dependencies.
- Uses TypeScript to reduce runtime errors.
- Architecture (modules, components, services) enforce consistency.
- Powerful CLI commands (ng generate, ng serve, ng deploy, etc).
- Integrated unit test tools (Jest)
- Angular Material library for UI.
- Ideal for large enterprise apps.

Cons

- Steep learning curve (understanding of modules, dependencies, RxJS).
- Larger bundle size vs lighter frameworks (React)









Why is it component-based?


You may have heard "Write once, use anywhere".
Which means: we create a component and then reuse
it across the app.

In my opinion, it is more a marketing hype.
Because, the effort to maintain this shared component
is harder, than creating a new component needed.


We use components in our Angular app for these reasons:

1) Logical Separation of Concerns
- Components isolate pages, sections or dialogs.
- Cleaner than dumping everything into a single file.

2) Better Maintainability
- Changes in one component don’t break others.
- Easier to debug.

3) Easier Team Collaboration
- Different teams can work on different components.










Current Angular application architecture

Two Angular apps.





Our platform consists of two separate Angular applications:

1) Landing page application
Entry point for brokers clicking "Contact CL" from the Broker Portal

Core functionalities:

- Initiate new quotes manually.
- Upload files for automatic quote generation.
- Search existing quotes and policies.

2) Main application (CCL2)

This app has all pages for:

- Create and/or update a quote.
- Bind a quote and create a policy.
- Update the policy.



Brokers may land on Main application via:

1) Landing page
2) Directly through url (bookmarked the link)












Repos

Landing
https://githubifc.iad.ca.inet/ContactCL/cl-landing-page-appstatic

CCL2
https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic










Code owners


Augusto Wong
Jason Fang
Ana Sreekumar
Andrei Navumau







git workflow







Branch names

Base branch is 'develop'.
Any time you start working, you create
your own branch based on 'develop'.

Name convention for a branch: your Jira story #.

Example commands

> git checkout develop
> git pull
> git checkout -b broker-4240






Pull Requests on GitHub


Run all tests locally before creating a PR
(how to run tests - details below).


When creating a new PR, please, don't forget:

- (Mandatory) Add title to your PR according to this convention:
[ticket-number] title

    Examples
    BROKER-4240 Add Liva Chat implementation
    bug / cedt-2399 Fix Styles
    feat / ccl-60478 Business page risk selection

- (Optional) Add release name in all caps inside of parenthesis
if you are adding changes to a release branch.

    Example
    BROKER-4240 (COSMOS) Add Liva Chat implementation

- (Mandatory) Add a detailed description to your PR explaining why
you are making the change, include a link to Jira story
and screenshots of before and after state (if possible).

- (Recommended) Request AI-assist review your PR.

- (Recommended) Request review from 'ContactCL/digitalartisans' group.

- (Optional) Add a label.

Labels help quickly search for the related changes.
You can select existing label or create your own.

- (Recommended) Post a link to your PR in a 'Big Angular gang' MS teams chat.

If you are not part of this chat, please, let me know and I will add you.




PRs for Angular apps should be approved:

First -> by a dev lead from your team.
Second -> by a code owner.










Gating & Deployment

Each PR has automated tests (ARS Junior) attached.
These tests must pass before you will be able
to merge your PR.

If ARS Junior fails, there is a link to 'Details' page,
where you can see what caused the failure.


If your PR was merged successfully, it will be
deployed to DEV11 environment.

In DEV11 environment another set of automated tests
run - this time ARS (not Junior).

If ARS tests pass in DEV11 (we call it 'Gating'), your code is
deployed to INTG11 environment.

The deployment from DEV11 to INTG11 happens twice a day:

- 12pm
- 8pm

If ARS tests fail, your changes will not be deployed to INTG11.

This may happen for two reasons:

1. Your code is breaking the app.
2. External dependency/service is not working.

In first case you would need to work with
Autobots team to get the details of the failure and create a fix.

In second case you would need to wait next
Gating cycle.




















Which IDE to use, recommendation?

I was using VS Code and other UI devs still use it.
Now I am using IntelliJ




