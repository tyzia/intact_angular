





Plan

Intro to Angular
SPA
Landing page and CCL2 app
Users: BR, UW
Main environments: INTG11,08
git workflow
PRs and Gating
Running on local













What is Angular?

- A front-end framework developed by Google.
- Allows to create single-page application (SPA).
- Component-based architecture.







What is a single-page application?






Traditional website flow

1) Initial page load

- Browser → Requests index.html from the server.
- Server → Responds with full HTML + linked CSS/JS/images.
- Browser → Renders the page.

2) User clicks a link (e.g., /about)

- Browser → Requests about.html from the server.
- Server → Sends a brand new HTML page (with its own CSS/JS).
- Browser → Unloads the current page, reloads everything from scratch.

Result: Visible "flash" or blank screen during reload.

demo: https://commons.wikimedia.org/wiki/Category:CommonsRoot




Single-page application flow

1) Initial page load

- Browser → Requests index.html.
- Server → Responds with minimal HTML + Angular app bundle (JS/CSS).
- Browser → Renders the app.

2) User clicks a link (e.g., /about)

- Angular (JS) → Intercepts the click.
- No server request!
- Angular (JS) → Updates the URL to /about.
- Angular (JS) → Loads the "About" component and swaps it in the DOM.
- No full page reload!

Result: Instant transition, no flash/blank screen.




To sum up:

In Angular:

- All UI interactions (clicks, form submissions, navigation)
are handled client-side by JavaScript.
- No full page reloads occur.
- Angular dynamically updates the DOM.
- Angular makes fetch()/HTTP calls to APIs and gets JSON as response
if data from backend is needed.
- The server acts as a data endpoint (REST API).







Pros and cons



Pros

- Build-in solutions, libraries, dependencies.
- Uses TypeScript to reduce runtime errors.
- Architecture (modules, components, services) enforce consistency.
- Powerful CLI commands (ng generate, ng serve, ng deploy, etc).
- Integrated unit test tools (Jest)
- Angular Material library for UI.
- Ideal for large enterprise apps.

Cons

- Steep learning curve (understanding of modules, dependencies, RxJS).
- Larger bundle size vs lighter frameworks (React)










Current Angular application architecture

Two Angular apps.





Our platform consists of two separate Angular applications:

1) Landing page application
Entry point for brokers clicking "Contact CL" from the Broker Portal

Core functionalities:

- Initiate new quotes manually.
- Upload files for automatic quote generation.
- Search existing quotes and policies.

2) Main application (CCL2)

This app has all pages for:

- Create and/or update a quote.
- Bind a quote and create a policy.
- Update the policy.







Versions of Angular

Both our Angular apps are v17.


To see a version of Angular open
package.json and see "dependencies" for
Angular.

For example, @angular/animations: 17.3.12

This means that we have Angular v17.




Brokers may land on CCL2 application via:

1) Landing page
2) Directly through url (bookmarked the link)









Users: Brokers vs Underwriters

We have two categories of users
who can access the same Angular app:

1. Internal or Underwriters (UW)
2. External or Brokers (BR)



Our main environments:

- INTG11
- INTG08


Our main git branches:

develop - main branch
release/[YY_MM_name] - release branches (e.g. release/25_06_discovery)


develop branch is deployed to INTG11
release branch is deployed to INTG08








Links to the environments


UW use special links which do not
require username and password.

BR use their links which
require username and password.

INTG11

    BROKER
    CCL2: https://ccl2-ui-11.wsintg-brokers.iad.ca.inet/
    Landing: https://landing-ui-11.wsintg-brokers.iad.ca.inet/contact-cl-landing-static/quotes

    UNDERWRITER
    CCL2: https://contact-cl-11-intg-cl-fullquote-appstatic-rg.apps.np.iad.ca.inet/contact-cl-pc-static/business-information
    Landing: https://contact-cl-landing-static-11.intg.dsso.intactfc.com/contact-cl-landing-static/quotes

INTG08

    BROKER
    CCL2: https://ccl2-ui-08.wsintg-brokers.iad.ca.inet/contact-cl-pc-static/triage/business-information
    Landing: https://landing-ui-08.wsintg-brokers.iad.ca.inet/contact-cl-landing-static/quotes

    UNDERWRITER
    CCL2: https://contact-cl-pc-static-08.intg.dsso.intactfc.com/contact-cl-pc-static/business-information
    Landing: https://contact-cl-landing-static-08.intg.dsso.intactfc.com/contact-cl-landing-static/quotes








git repos

Landing
https://githubifc.iad.ca.inet/ContactCL/cl-landing-page-appstatic

CCL2
https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic










Code owners


Augusto Wong
Jason Fang
Ana Sreekumar
Andrei Navumau







git workflow







Branch names

Base branch is 'develop'.
Any time you start working, you create
your own branch based on 'develop'.

Name convention for a branch: your Jira story #.

Example commands

> git checkout develop
> git pull
> git checkout -b broker-4240






Pull Requests on GitHub


Run all tests locally before creating a PR
(how to run tests - details below).


When creating a new PR, please, don't forget:

- (Mandatory) Add title to your PR according to this convention:
[ticket-number] title

    Examples
    BROKER-4240 Add Liva Chat implementation
    bug / cedt-2399 Fix Styles
    feat / ccl-60478 Business page risk selection

- (Optional) Add release name in all caps inside of parenthesis
if you are adding changes to a release branch.

    Example
    BROKER-4240 (COSMOS) Add Liva Chat implementation

- (Mandatory) Add a detailed description to your PR explaining why
you are making the change, include a link to Jira story
and screenshots of before and after state (if possible).

- (Recommended) Request AI-assist review your PR.

- (Recommended) Request review from 'ContactCL/digitalartisans' group.

- (Optional) Add a label.

Labels help quickly search for the related changes.
You can select existing label or create your own.

- (Recommended) Post a link to your PR in a 'Big Angular gang' MS teams chat.

If you are not part of this chat, please, let me know and I will add you.




PRs for Angular apps should be approved:

First -> by a dev lead from your team.
Second -> by a code owner.










Gating & Deployment

Each PR has automated tests (ARS Junior) attached.
These tests must pass before you will be able
to merge your PR.

If ARS Junior fails, there is a link to 'Details' page,
where you can see what caused the failure.


If your PR was merged successfully, it will be
deployed to DEV11 environment.

In DEV11 environment another set of automated tests
run - this time ARS (not Junior).

If ARS tests pass in DEV11 (we call it 'Gating'), your code is
deployed to INTG11 environment.

The deployment from DEV11 to INTG11 happens twice a day:

- 12pm
- 8pm

If ARS tests fail, your changes will not be deployed to INTG11.

This may happen for two reasons:

1. Your code is breaking the app.
2. External dependency/service is not working.

In first case you would need to work with
Autobots team to get the details of the failure and create a fix.

In second case you would need to wait next
Gating cycle.










Which IDE to use with Angular?

- VS Code
- IntelliJ

I was using VS Code and other UI devs still use it.
Now I am using IntelliJ











How to run Angular app locally

There might be different reasons why
you are trying to run Angular app locally.
Based on the reason there will be slightly
different way of running the app.


> ng serve

It is the Angular CLI command to:

- Compile your Angular app (TypeScript → JavaScript).
- Bundle files (HTML, CSS, JS) for development.
- Start a local dev server (default: http://localhost:4200).
- Enable live-reload (auto-refreshes when you edit code).


1) Start Angular app CCL2 from INTG11 locally

If you need to quickly see how Angular app
works in INTG11, you will use 'ng serve' this way.

> git checkout develop
> git pull
> ng serve

go to this url: http://localhost:4200




2) Start Angular app CCl2 for particular quote from INTG11

I would need 'pd' value.

pd = policy details

- Open INTG11 Landing page
- Search for a quote (e.g. Q02640454)
- Click on this quote -> load CCl2 summary page
- Click 'Edit' or 'Read only' to open this quote
- This will open a nex tab. Open devtools.
- Navigate to the next page and inspect Network tab in devtools
- Search for 'contract' Fetch/XHR call and get 'contractVersionUuid'
("ddea8ddc-ab0d-4d86-b105-8830ccc665de")
- Start Angular app locally:

> git checkout develop
> git pull
> ng serve

- go to this url: http://localhost:4200?pd=ddea8ddc-ab0d-4d86-b105-8830ccc665de

demo


Disable live-reload

demo with business-information.component.html

> ng serve --live-reload=false


3) Start Angular app CCL2 from INTG08 locally

> git checkout release/25_06_discovery
> git pull
- change fqclConfig.json to this:
"fullQuoteServiceURL": "https://contact-cl-08-intg-cl-fullquote-appstatic-rg.apps.np.iad.ca.inet/api",

> ng serve

go to this url: http://localhost:4200



4) Start Angular app CCl2 for particular quote from INTG08

I would need 'pd' value.

- Open INTG08 Landing page
- Search for a quote (e.g. Q02640454)
- Click on this quote -> load CCl2 summary page
- Click 'Edit' or 'Read only' to open this quote
- This will open a nex tab. Open devtools.
- Navigate to the next page and inspect Network tab in devtools
- Search for 'contract' Fetch/XHR call and get 'contractVersionUuid'
("ddea8ddc-ab0d-4d86-b105-8830ccc665de")
- Start Angular app locally:

> git checkout develop
> git pull
- change fqclConfig.json to this:
"fullQuoteServiceURL": "https://contact-cl-08-intg-cl-fullquote-appstatic-rg.apps.np.iad.ca.inet/api",

> ng serve

- go to this url: http://localhost:4200?pd=ddea8ddc-ab0d-4d86-b105-8830ccc665de




In all the cases above, we used real, INTG11 or 08, rest layer
with local UI (Angular).





5) Start Angular app CCL2 with mock server

This is helpful when you develop a new feature
or component and you don't need a real quote.

/server - has all files for a mock server

It is handled by Express.js framework.
We mock any API calls in Express and return
mock data to Angular.

> node ./server/server.js

Mock server will start on port 8090.

> git checkout develop
> git pull
- change fqclConfig.json to this:
"fullQuoteServiceURL": "http://localhost:8090",

> ng serve

- go to this url: http://localhost:4200



6) Start Angular Landing app from INTG11 locally

> git checkout develop
> git pull
- change cllpConfig.json to this:
"OTHER" : "https://contact-cl-11-intg-cl-landing-page-appstatic.apps.np.iad.ca.inet/api"

> ng serve

go to this url: http://localhost:4200







Running with both Rest layer and Angular locally:

https://intactfinancialgrp.atlassian.net/wiki/spaces/~rpzku652/pages/531837265/Running+CCL2+Locally



To change port number:

> ng serve --port 4201







Thank you.