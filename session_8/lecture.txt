





Plan

Components
Style Encapsulation
Modules
Angular Material
Bootstrap
Tailwind










Components






Angular has a component-based architecture.


You may hear about components: "Write once, use anywhere".
Which means: we create a component and then reuse
it across the app.

In my opinion, it is more a marketing hype.
Because, the effort to maintain this shared component
is larger, than creating a new component.


We use components in our Angular app for other reasons:

1) Logical Separation of Concerns
- Components isolate pages, sections or dialog popups.
- Cleaner than dumping everything into a single file.

2) Better Maintainability
- Changes in one component don’t break others.
- Easier to debug.

3) Easier Team Collaboration
- Different teams can work on different components.






Project folder structure


cbfq-rg-appstatic/projects/cbfq-appstatic
components
directives
models
modules
services
utils










Components




A component is a custom HTML element
that bundles its own behavior, view,
and styles into a single reusable unit.







Each component has 3 or 4 parts:

- TS file to add logic -> example.component.ts
- HTML template file to control the view -> example.component.html
- SPEC file to add unit tests -> example.component.spec.ts
- SCSS file to control styling (optional) -> example.component.scss











Syntax


1) Logic of component
example.component.ts

@Component({
  selector: 'app-example',
  templateUrl: './example.component.html',
  styleUrls: ['./example.component.scss']
})
export class ExampleComponent {
  message = 'Hello World!';
}

The selector should be unique and start with 'app-'.

2) View of the component
example.component.html

<p class='hello'>Hello world</p>

3) Styles of the component
example.component.scss

.hello { font-size: 2rem; }






Example of using this component in other component:

other-place.component.html
<div>
    <app-example></app-example>
</div>


Result after running the app in browser:
<div>
    <p class='hello'>Hello world</p>
</div>






Style Encapsulation





Angular components have view encapsulation.
Styles defined in a component
only apply to that component's template.



Example

blue-text.component.ts
@Component({
  selector: 'app-blue-text',
  template: `<div class="hello">I'm blue text</div>`,
  styles: [`
    .hello {
      color: blue;
      font-size: 20px;
    }
  `]
})
export class BlueTextComponent {}

red-text.component.ts
@Component({
  selector: 'app-red-text',
  template: `<div class="hello">I'm red text</div>`,
  styles: [`
    .hello {
      color: red;
      font-weight: bold;
    }
  `]
})
export class RedTextComponent {}

The app:

<app-blue-text></app-blue-text>
<app-red-text></app-red-text>




To make sure that styles are correctly
applied to each component, Angular will:

1. Add unique attribute to HTML component.
2. Update css of the component using this attribute.






Result in browser:

DOM
<app-blue-text _ngcontent-blue>
  <div _ngcontent-blue class="hello">I'm blue text</div>
</app-blue-text>

<app-red-text _ngcontent-red>
  <div _ngcontent-red class="hello">I'm red text</div>
</app-red-text>

Styles
.hello[_ngcontent-blue] {
  color: blue;
  font-size: 20px;
}
.hello[_ngcontent-red] {
  color: red;
  font-weight: bold;
}










We group components under 'modules'.



Syntax


@NgModule({
  declarations: [],   // Components/Directives/Pipes
  imports: [],        // Other modules this module depends on
  exports: [],        // What other modules can use (public API)
  providers: [],      // Services used by the components in this module
})
export class FeatureModule {}





Example 'Add Coverage' module
https://githubifc.iad.ca.inet/ContactCL/cbfq-rg-appstatic/tree/develop/projects/cbfq-appstatic/src/app/modules/add-coverage



The main file for the module is:
add-coverage.module.ts



add-coverage.module.ts defines any components,
related to the module, in 'declarations'
property of @NgModule() decorator.


@NgModule({
    declarations: [
        SearchCoveragesComponent,
        AddCoveragesDialogComponent,
        ...
    ]
})

Any time you will be creating a new component,
you should add it to related module to 'declarations'.










Angular Material




- A UI component library built by the Angular team
- Provides pre-built components
(buttons, dialogs, forms, tables).
- Integrates seamlessly with Angular
(no jQuery or external dependencies).







Why use it?
- Saves development time.
- Consistent, polished look.
- Built-in accessibility
- Build-in responsiveness






Angular Material Components

It offers 40+ ready-to-use components:
- MatButton
- MatCard
- MatDialog
- MatInput
etc








Angular Material Directives
- matTooltip






Example

HTML
<button>Click Me</button>

CSS
{ ... custom styles so that button looks good ... }



HTML (with Material)
<button mat-raised-button color="primary">Click Me</button>

Demo:

https://stackblitz.com/edit/angular-material-example-d8xnsyzy?file=app%2Fapp.component.html








Key Benefits
- Consistency: Follows Material Design principles.
- Accessibility: ARIA support out of the box.
- Responsive: Works on mobile/desktop.
- Angular-Optimized: Uses Angular’s change detection efficiently.











Bootstrap











Bootstrap is a popular front-end framework.

It has utility classes predefined and a grid system.

Essentially they allow to divide any container into
12 columns. Next, I can use classes to specify the
width of these "columns":

I need to use this class structure in my HTML
if I want to use grid system from Bootstrap:


.row {
    .col-[number] { }
}



Example

HTML

<div class="row">
    <div class="col-6">Left Column (50%)</div>
    <div class="col-6">Right Column (50%)</div>
</div>

This will divide the full width of my
container into two equal parts:

6 columns out of 12 possible for "Left Column"
6 columns out of 12 possible for "Right Column"

6 + 6 = 12.
As these two columns will take all 12 possible columns
there will be no space left on the page.




Example

<div class="row">
    <div class="col-2">Left Column (1/6th)</div>
    <div class="col-6">Right Column (50%)</div>
</div>

In this example I will have one narrow Left column:

2 columns out of 12 possible for "Left Column"
6 columns out of 12 possible for "Right Column"

2 + 6 = 8.

These two columns do not take the full 12 column
width, as they only take 8 columns. The rest (4 columns)
will be empty space on my page to the right.








Bootstrap allows to control responsiveness:

Breakpoints






default or none

example: .col-6
This class will be applied only on max-width: 576px

sm

example: .col-sm-6
This class will be applied only on
min-width: 576px and max-width: 768px


md

example: .col-md-6
This class will be applied only on
min-width: 768px and max-width: 992px


lg

example: .col-lg-6
This class will be applied only on
min-width: 992px and max-width: 1200px


xl

example: .col-xl-6
This class will be applied only on
min-width: 1200px and max-width: 1400px


xxl

example: .col-xxl-6
This class will be applied only on
min-width: 1400px










Online example:

https://getbootstrap.com/docs/5.3/examples/grid/








Tailwind








Tailwind is a CSS framework
that lets you style HTML by
applying pre-defined classes
directly in your markup
without writing CSS.





Why Tailwind?
- Speed: No switching between HTML/CSS files.
- Consistency: Reuse same classes everywhere.
- Simple class names.




Docs:
https://tailwindcss.com/docs/font-size



Example

HTML
<span>hello world</span>

CSS
span { font-size: 16px; }

Tailwind
<span class="text-base">hello world</span>

.text-base -> font-size: 16px;




Example

HTML
<div>
    <p>hello</p>
    <p>world</p>
</div>

CSS
div { display: flex; flex-direction: column; }


Tailwind
<div class="flex flex-col">
    <p>hello</p>
    <p>world</p>
</div>

.flex -> display: flex;
.flex-col -> flex-direction: column;






Prefix (tw-)


In our CCL2 app we use custom prefix
for all our Tailwind classes:

tw-


So:

.text-base -> .tw-text-base
.flex -> .tw-flex
.flex-col -> .tw-flex-col







Configuration





tailwind.config.js
This file has all predefined values.



Spacing

CSS
margin-left: 12px;
padding: 24px;

TW
.tw-ml-12;
.tw-p-24;


Colors

CSS
color: #e05e00
background-color: #dfecea;

TW
.tw-text-e05e00
.tw-bg-dfecea










Official Sandbox
https://play.tailwindcss.com/






In our app we currently have a hybrid:

1. Custom CSS
2. Angular Material styles
3. Bootstrap
4. Tailwind






When we add new components - the direction is
to use only Tailwind.

When we update old components - we can keep old
styling as well.







Thank you
