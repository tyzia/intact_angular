





Plan

Interpolation
Property Binding
Event Binding
Structural Directives
  *ngIf (Conditional Rendering)
  *ngFor (Lists & Looping)
Attribute Directives
Styling Demo





Angular Templates define the view
using HTML and Angular syntax.

If we want to add or bind data
into our components we need 'data binding'.

For instance, I want to:

- pass data into component
- dynamically update attribute/property
- react to events

Types of data binding:

- interpolation {{ ... }}
- property binding [property]="value"
- event binding (event)="handler()"






Examples:

Interpolation {{ }}
is used for text content.

component.html
<div>

  <p>Hello World!</p>

  <p>{{ dynamicMessage }}</p>
  <p>My name is {{ name }}</p>

</div>

component.ts
export class ExampleComponent {
    dynamicMessage = 'hello world';
    name = 'Andrei';
}


Property binding []
is used for html attributes

component.html
<div>

    <img src="/assets/images/icon.svg" alt='logo'>
    <img [src]="imageSource" alt='logo'>

    <button [disabled]="isDisabled">Submit</button>

</div>

component.ts
export class ExampleComponent {
    imageSource: string;
    isDisabled: boolean = true;

    ngOnInit(): void {
        imageSource = isFrench ? 'logo_fr.svg' : 'logo_en.svg';
    }
}


Event binding ()
is used when event occurs (click, blur, submit)

component.html
<div>

    <button (click)="onClick()">Send</button>

    <form (submit)="onSubmit($event)">
         <button type=Submit>Submit</button>
    </form>

</div>

component.ts
export class ExampleComponent {
    onClick() {
        ...
    }
    onSubmit(e: Event) {
        e.preventDefault();
        ...
    }
}




Structural directives

Help control whether and how elements
appear in your Angular templates.
They're like "HTML superpowers" that let you:

- Show/hide elements based on conditions (*ngIf)
- Repeat elements for lists (*ngFor)



Examples

If condition *ngIf

component.html

<div *ngIf="isLoggedIn">
  Welcome back!
</div>

<div *ngIf="!isLoggedIn">
  Please log in.
</div>

component.ts
export class ExampleComponent {
    isLoggedIn: boolean;

    ngOnInit(): void {
        isLoggedIn = condition ? true : false;
    }
}


Repeat with *ngFor
The "For Loop" for HTML

Repeats an element for each item in a list.

component.html

<ul>
  <li *ngFor="let item of shoppingList">
    {{ item.name }}
  </li>
</ul>

component.ts
export class ExampleComponent {
    shoppingList = [
        { name: "Apples" },
        { name: "Bananas" },
        { name: "Milk" },
    ];
}

Result:

<ul>
  <li>Apples</li>
  <li>Bananas</li>
  <li>Milk</li>
</ul>


Combination & nesting

<ul *ngIf="showList">
  <li *ngFor="let product of products">
      {{ product.name }} - ${{ product.price }}
  </li>
</ul>

export class ProductComponent {
    showList: boolean = true;
    products = [
        { name: "Laptop", price: 999 },
        { name: "Headphones", price: 149 },
        { name: "Mouse", price: 25 },
    ];
}

Result:

<ul>
  <li>Laptop - $999</li>
  <li>Headphones - $149</li>
  <li>Mouse - $25</li>
</ul>




Nested ngIf

<div *ngIf="user.isPremium">
  <h2>Premium Dashboard</h2>
  <div *ngIf="user.remainingDownloads > 0">
    You have {{ user.remainingDownloads }} downloads left!
  </div>
  <div *ngIf="user.remainingDownloads === 0">
    You've used all your downloads.
  </div>
</div>

export class UserComponent {
  user = {
    isPremium: true,
    remainingDownloads: 3
  };
}




Attribute directives

ngClass
Applies CSS classes conditionally.


<div [ngClass]="{ 'active': isActive, 'inactive': !isActive }">
  ...
</div>

css:
.active { background-color: white }
.inactive { background-color: gray }

export class UserComponent {
  isActive: boolean = true;
}

Here:

When isActive = true
Applies .active class (white background)

When isActive = false
Applies .inactive class (gray background)




Styling Demo




1. Open Figma
https://www.figma.com/design/Lp0enNKTWskMpxVytXmiN1/FQNB-Enhancements?node-id=5917-61312&p=f&t=27EwXVzqZMzjqMk2-0


2. Create a component inside total-premium module
> mkdir adjust-premium-demo
> cd adjust-premium-demo
create adjust-premium-demo.component.ts
create adjust-premium-demo.component.html
create adjust-premium-demo.component.scss

3. Open ts file:

export class AdjustPremiumDemoComponent {}

@Component({})

alt+enter -> add import

selector: 'app-adjust-premium-demo',

templateUrl: './adjust-premium-demo.component.html'

warning: AdjustPremiumDemoComponent is not declared
in any Angular module.

go to offer.module.ts and add to declarations:

AdjustPremiumDemoComponent,

alt+enter -> add import

open adjust-premium-demo.component.html

<p>hello world</p>

Because it is a dialog we need to open
this dialog on button click on Offer page.

open total-premium.component.ts

line 76: openDialog()

this.dialog.open(AdjustPremiumDemoComponent);

alt+enter -> add import

comment out the rest

start Angular mock server + Angular

click on Adjust Premium

Let's use Angular material:

<mat-dialog-content>
  <p>hello world</p>
</mat-dialog-content>

click on Adjust Premium

Let's add interpolation:

message: string = 'this comes from component';

and update template:

<p>{{ message }}</p>

In Figma see padding for dialog: 56px 40px 40px 40px

in template add class:

<mat-dialog-content class="adjust-premium-demo">

and in scss file:

.adjust-premium-demo {
  padding: 56px 40px 40px 40px;
}

But style is not applied.

in ts file:

styleUrls: ['./adjust-premium-demo.component.scss'],

show specificity and why my style is not applied

Make more specific with id:

<mat-dialog-content id="adjust-premium-demo">
  <p>{{ message }}</p>
</mat-dialog-content>

#adjust-premium-demo {
  padding: 56px 40px 40px 40px;
}

Next apply Tailwind:

<mat-dialog-content id="adjust-premium-demo" class="tw-p-[56px_40px_40px_40px]">

Show that specificity is not enough

Let's apply Tailwind through id:

@apply tw-p-[56px_40px_40px_40px];

Now let's add title:

<h1>Adjust premium</h1>

It's font-size is 32px, I need 24px

go to Tailwind docs and search for font-size

<h1 class="tw-text-2xl">Adjust premium</h1>

Let's set text in the middle

<h1 class="tw-text-2xl tw-text-center">Adjust premium</h1>

Let's update the color:

<h1 class="tw-text-2xl tw-text-center tw-text-333333">Adjust premium</h1>

Let's add one more element:

<div>
    <div>
      <p>Recommended premium is being applied</p>
      <p>By applying the recommended premium, you can increase price stability year over year and build a more profitable portfolio.</p>
      </div>
    <img src="" alt="">
  </div>


How to export image from Figme?

1. Select the image in Figma.
2. In the right panel, find the "Export" section.
3. Click the "+" button to add an export setting.
4. Choose the format (SVG).
5. Click the "Export" button.
6. Save the file to your project directory
(e.g., `assets/images/icons/adjust-premium/best_price.svg`).

<img src="assets/images/icons/adjust-premium/best_price.svg" alt="Recommended Premium">

Missing required 'alt' attribute.

Add empty alt

<img ngSrc="assets/images/icons/adjust-premium/best_price.svg" width="80" height="80" alt>

Add aria-hidden=true to hide image from screen readers

and we have:

<div>
    <div>
      <p>Recommended premium is being applied</p>
      <p>By applying the recommended premium, you can increase price stability year over year and build a more profitable portfolio.</p>
      </div>
    <img ngSrc="assets/images/icons/adjust-premium/best_price.svg" width="80" height="80" aria-hidden="true" alt>
  </div>


Add padding 16px:

<div class="tw-p-16">

Let's add border:

<div class="tw-p-16 tw-border tw-border-d8d8d8 tw-rounded-[4px]">

Now let's make them in two columns:

add display: flex and set the gap

next apply colors to paragraphs and result:

<div class="tw-p-16 tw-border tw-border-d8d8d8 tw-rounded-[4px] tw-flex tw-gap-8 tw-text-333333">
    <div>
      <p class="tw-text-sm tw-font-medium">Recommended premium is being applied</p>
      <p class="tw-text-sm">By applying the recommended premium, you can increase price stability year over year and build a more profitable portfolio.</p>
      </div>
    <img ngSrc="assets/images/icons/adjust-premium/best_price.svg" width="80" height="80" aria-hidden="true" alt>
  </div>

